package jclec.problem.classification.multiinstance;

import jclec.problem.classification.ClassificationReporter;
import jclec.problem.classification.IClassifier;
import jclec.problem.util.dataset.IDataset;
import jclec.problem.util.dataset.IExample;
import jclec.problem.util.dataset.IMetadata;
import jclec.problem.util.dataset.attribute.IAttribute;

import java.io.FileWriter;
import java.io.IOException;

/**
 * Listener for multi-instance classification algorithms
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public abstract class MIClassificationReporter extends ClassificationReporter
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */ 
	
	private static final long serialVersionUID = -8548482239030974796L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Constructor
	 */
	
	public MIClassificationReporter() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	/**
     * Obtain the percentage of correct predictions, the percentage of bad predictions,
     * the percentage of unclassified, the percentage of correct predictions per class
     * 
     * @param dataset Dataset
     * @param predicted values predicted for the dataset examples
     * @return vector that contains the percentage of correct predictions, the percentage 
     * of bad predictions the percentage of unclassified and the percentage of correct 
     * predictions per class
     */
    protected double [] checkingResult(IDataset dataset, double [] predicted)
	{
		IMetadata metadata = dataset.getMetadata();
    	int numClasses = metadata.numberOfClasses();
    	double [] result = new double[3+numClasses*2];
    	double success=0, fail =0, unclassified=0;

    	for(int i=0; i<numClasses*2; i++)
    		result[3+i] = 0.0;
    	
    	int i = 0;
    		
    	for (IExample bag : dataset.getExamples()) 
    	{
    		double Class = ((MIBag) bag).getClassValue();
    			
    		result[3+numClasses+(int)Math.round(Class)] ++;
				
			if(predicted[i] == -1)
				unclassified++;
			else if(Class != predicted[i])
				fail++;
			else
			{
				success++;
				result[3+(int)Math.round(Class)]++;
			}
			i++;
    	}
    	
    	// Success rate
    	result[0] = success/dataset.getExamples().size();
    	// Fail rate
    	result[1] = fail/dataset.getExamples().size();
    	// Unclassified rate
    	result[2] = unclassified/dataset.getExamples().size();
    	
    	return result;
    }

	/**
	 * This method classifies a dataset and write the results in the FileWriter
	 * 
	 * @param dataset The dataset
	 * @param classifier The classifier
	 * @param file The file to write
	 */
    @Override
    protected void classify(IDataset dataset, IClassifier classifier, FileWriter file)
    {
    	MIClassificationMetadata metadata = (MIClassificationMetadata) dataset.getMetadata();
		int numExamples = 0;
		
		double [] predicted = ((IMIClassifier) classifier).classify(dataset);
		
    	try {
    		file.write("DATASET: " + dataset.getName());
    		
    		for (IExample bag : dataset.getExamples()) 
        	{
				double Class = ((MIBag) bag).getClassValue();
				
				IAttribute attribute;
				file.write("\n");
				
				file.write(bag.toString());
				
				attribute = metadata.getClassAttribute();
				
				file.write(attribute.show(((MIBag) bag).getClassValue()));
							
				if(predicted[numExamples] == -1)
					file.write("\t Predicted: Unclassified -> FAIL" );
				else if(Class != predicted[numExamples])
					file.write("\t Predicted: "+attribute.show(predicted[numExamples]) + " -> FAIL");
				else
					file.write("\t Predicted: "+attribute.show(predicted[numExamples]) + " -> HIT");
				
				numExamples++;
        	}

			file.close();
			
		}catch (IOException e) 
		{
			e.printStackTrace();
		}
    }
}