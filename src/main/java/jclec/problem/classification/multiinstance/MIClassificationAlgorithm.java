package jclec.problem.classification.multiinstance;

import jclec.problem.classification.ClassificationAlgorithm;
import jclec.problem.util.dataset.AbstractDataset;
import jclec.problem.util.dataset.IDataset;
import org.apache.commons.configuration.Configuration;

/**
 * Multi-instance Classification Algorithm
 *
 * @author Alberto Cano
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna
 * @author Juan Luis Olmo
 */

public abstract class MIClassificationAlgorithm extends ClassificationAlgorithm {
    // ///////////////////////////////////////////////////////////////
    // ---------------------------------------- Serialization constant
    // ///////////////////////////////////////////////////////////////

    /**
     * Generated by Eclipse
     */

    private static final long serialVersionUID = -8711970425735016406L;

    // ///////////////////////////////////////////////////////////////
    // -------------------------------------------------- Constructors
    // ///////////////////////////////////////////////////////////////

    /**
     * Empty (default) constructor
     */

    public MIClassificationAlgorithm() {
        super();
    }

    /////////////////////////////////////////////////////////////////
    //--------------------------------------------- Protected methods
    /////////////////////////////////////////////////////////////////

    /**
     * Set the dataset settings
     *
     * @param settings Configuration settings
     */
    @SuppressWarnings("unchecked")
    protected void setDatasetSettings(Configuration settings) {
        try {
            //Train and test set classname
            String datasetClassname = settings.getString("dataset[@type]");
            Class<? extends IDataset> datasetClass;
            datasetClass = (Class<? extends IDataset>) Class.forName(datasetClassname);

            // Train set
            setTrainSet(datasetClass.newInstance());
            Configuration datasetSettings = settings.subset("dataset.train-data");
            ((AbstractDataset) getTrainSet()).configure(datasetSettings);
            getTrainSet().setMetadata(new MIClassificationMetadata());
            getTrainSet().loadExamples();

            // Test set
            setTestSet(datasetClass.newInstance());
            datasetSettings = settings.subset("dataset.test-data");
            ((AbstractDataset) getTestSet()).configure(datasetSettings);
            getTestSet().setMetadata(new MIClassificationMetadata());
            getTestSet().loadExamples();

            // Gets the attribute class
            String attributeClass = settings.getString("dataset.attribute-class-name");

            if (attributeClass != null) {
                int attributeClassIndex = getTrainSet().getMetadata().getAttributeIndex(attributeClass);
                ((MIClassificationMetadata) getTrainSet().getMetadata()).setClassIndex(attributeClassIndex);
                ((MIClassificationMetadata) getTestSet().getMetadata()).setClassIndex(attributeClassIndex);
            } else if (((MIClassificationMetadata) getTrainSet().getMetadata()).getClassIndex() == -1) {
                // Set the last attribute as the class attribute by default
                ((MIClassificationMetadata) getTrainSet().getMetadata()).setClassIndex(getTrainSet().getMetadata().numberOfAttributes());
                ((MIClassificationMetadata) getTestSet().getMetadata()).setClassIndex(getTestSet().getMetadata().numberOfAttributes());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}