package jclec.problem.classification.multilabel;

import jclec.problem.classification.ClassificationAlgorithm;
import jclec.problem.util.dataset.AbstractDataset;
import jclec.problem.util.dataset.IDataset;
import org.apache.commons.configuration.Configuration;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

/**
 * Multi-label Classification Algorithm
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public abstract class MLClassificationAlgorithm extends ClassificationAlgorithm 
{
	// ///////////////////////////////////////////////////////////////
	// ---------------------------------------- Serialization constant
	// ///////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = -8711970425735016406L;

	// ///////////////////////////////////////////////////////////////
	// -------------------------------------------------- Constructors
	// ///////////////////////////////////////////////////////////////

	/**
	 * Empty (default) constructor
	 */

	public MLClassificationAlgorithm() {
		super();
	}

	/////////////////////////////////////////////////////////////////
	//--------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Set the dataset settings
	 * 
	 * @param settings Configuration settings
	 */
	@SuppressWarnings("unchecked")
	protected void setDatasetSettings(Configuration settings)
	{
		try {
			// Number of classes
			int numberClasses = -1;
			
			// Train and test set classnames
			String datasetClassname = settings.getString("dataset[@type]");
			Class<? extends IDataset> datasetClass;
			datasetClass = (Class<? extends IDataset>) Class.forName(datasetClassname);
			
			// Read dataset specification if required
			String specification = settings.getString("dataset.specification");
			if(specification != null)
			{
				numberClasses = obtainNumberClasses(specification);
			}
			
			// Train set
			setTrainSet(datasetClass.newInstance());
			Configuration datasetSettings = settings.subset("dataset.train-data");
			((AbstractDataset) getTrainSet()).configure(datasetSettings);
			getTrainSet().setMetadata(new MLClassificationMetadata(numberClasses));
			getTrainSet().loadExamples();
	
			// Test set
			setTestSet(datasetClass.newInstance());
			datasetSettings = settings.subset("dataset.test-data");
			((AbstractDataset) getTestSet()).configure(datasetSettings);
			getTestSet().setMetadata(new MLClassificationMetadata(numberClasses));
			getTestSet().loadExamples();
			
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	/**
	 * Obtain the number of classes from the specification file
	 * 
	 * @param fileName specification file
	 */
	private int obtainNumberClasses(String fileName)
	{
		int numberClasses = 0;
		
		try {
			BufferedReader fileReader = new BufferedReader(new FileReader(new File(fileName)));
			
			while(fileReader.readLine() != null)
				numberClasses++;
			
			fileReader.close();
			
			// Remove XML metadata
			numberClasses = numberClasses - 3;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return numberClasses;
	}
}